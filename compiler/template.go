package compiler

import (
	"io"
	"strconv"
	"strings"
)

type Template struct {
	Filename string
	Root     nodeBase
}

type templateWriter struct {
	w            io.Writer
	num          int
	indent       int
	inStatic     bool
	inErrHandler bool
	isUnescaped  bool
}

func (t *Template) Compose(w io.Writer) error {
	tw := &templateWriter{
		w: w,
	}

	if err := tw.Write("// Code generated by hamlet - DO NOT EDIT.\n\n"); err != nil {
		return err
	}

	tw.indent += 2
	err := t.Root.Source(tw)
	return err
}

func (tw *templateWriter) Indent() *templateWriter {
	itw := *tw
	itw.indent++
	return &itw
}

func (tw *templateWriter) GetVarName() string {
	tw.num++
	return "__var" + strconv.Itoa(tw.num)
}

func (tw *templateWriter) WriteVar(s string) error {
	if tw.inStatic {
		if err := tw.closeStringLiteral(); err != nil {
			return err
		}
	}
	return tw.WriteIndent(`var ` + s + " string\n")
}

func (tw *templateWriter) Write(s string) error {
	if tw.inStatic {
		if err := tw.closeStringLiteral(); err != nil {
			return err
		}
	}
	return tw.write(s)
}

func (tw *templateWriter) WriteIndent(s string) error {
	if tw.inStatic {
		if err := tw.closeStringLiteral(); err != nil {
			return err
		}
	}
	if err := tw.write(strings.Repeat("\t", tw.indent)); err != nil {
		return err
	}
	return tw.write(s)
}

func (tw *templateWriter) WriteStringLiteral(s string) error {
	if !tw.inStatic {
		if err := tw.write(strings.Repeat("\t", tw.indent)); err != nil {
			return err
		}
		if err := tw.write(`if _, __err = __buf.WriteString("`); err != nil {
			return err
		}
		tw.inStatic = true
		tw.inErrHandler = true
	}

	return tw.write(s)
}

func (tw *templateWriter) WriteStringIndent(s string) error {
	if tw.inStatic {
		if err := tw.closeStringLiteral(); err != nil {
			return err
		}
	}
	if err := tw.write(strings.Repeat("\t", tw.indent)); err != nil {
		return err
	}
	if err := tw.write(`if _, __err = __buf.WriteString(` + s + "); __err != nil { return }\n"); err != nil {
		return err
	}
	return nil
}

func (tw *templateWriter) WriteErrorHandler() error {
	if tw.inStatic {
		err := tw.closeStringLiteral()
		return err
	}
	return tw.write(tw.addErrHandler())
}

func (tw *templateWriter) Close() error {
	if tw.inStatic {
		if err := tw.closeStringLiteral(); err != nil {
			return err
		}
	}
	return nil
}

func (tw *templateWriter) write(s string) error {
	_, err := io.WriteString(tw.w, s)
	return err
}

func (tw *templateWriter) closeStringLiteral() error {
	var nl = "\n"
	if tw.inErrHandler {
		nl = ""
	}
	s := `")` + nl + tw.addErrHandler()
	tw.inStatic = false
	return tw.write(s)
}

func (tw *templateWriter) addErrHandler() string {
	if tw.inErrHandler {
		tw.inErrHandler = false
		return "; __err != nil { return }\n"
	}
	return strings.Repeat("\t", tw.indent) + "if __err != nil { return }\n"
}
