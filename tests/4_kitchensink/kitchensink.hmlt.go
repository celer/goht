// Code generated by hamlet - DO NOT EDIT.

package __kitchensink

import (
	"bytes"
	"context"
	"github.com/stackus/hamlet"
	"io"
	"strconv"
)

var attrs = map[string]string{
	"lang":  "en",
	"class": "dark",
}

var boolAttrs = map[string]bool{
	"checked":  true,
	"disabled": true,
}

func KitchenSink() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<!DOCTYPE html><html class=\"dark\" lang=\"en\"><head><meta charset=\"utf-8\"><title>"); __err != nil {
			return
		}
		var __var1 string
		if __var1, __err = hamlet.CaptureErrors(hamlet.EscapeString("Kitchen Sink")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var1); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><link rel=\"stylesheet\" href=\"/css/kitchensink.css\"></head><body><script src=\"/js/kitchensink.js\"></script><header><h1>"); __err != nil {
			return
		}
		var __var2 string
		if __var2, __err = hamlet.CaptureErrors(hamlet.EscapeString("Kitchen Sink")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var2); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</h1><p>"); __err != nil {
			return
		}
		var __var3 string
		if __var3, __err = hamlet.CaptureErrors(hamlet.EscapeString("A collection of examples of the Haml markup language.")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var3); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p></header><section><h2>"); __err != nil {
			return
		}
		var __var4 string
		if __var4, __err = hamlet.CaptureErrors(hamlet.EscapeString("Basic HTML")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var4); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</h2><p class=\"important\" hx-post=\"/api/important\">"); __err != nil {
			return
		}
		var __var5 string
		if __var5, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is a basic example of Haml markup.")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var5); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p><ul><li>"); __err != nil {
			return
		}
		var __var6 string
		if __var6, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is an unordered list item")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var6); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</li><li>"); __err != nil {
			return
		}
		var __var7 string
		if __var7, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is another list item")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var7); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</li></ul></section><section><h2>"); __err != nil {
			return
		}
		var __var8 string
		if __var8, __err = hamlet.CaptureErrors(hamlet.EscapeString("Nested HTML")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var8); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</h2><p>"); __err != nil {
			return
		}
		var __var9 string
		if __var9, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is an example of a nested HTML tag.")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var9); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p><ul"); __err != nil {
			return
		}
		var __var10 string
		__var10, __err = hamlet.BuildAttributeList(attrs)
		if __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var10); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("><li"); __err != nil {
			return
		}
		var __var11 string
		__var11, __err = hamlet.BuildAttributeList(attrs, boolAttrs)
		if __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var11); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(">"); __err != nil {
			return
		}
		var __var12 string
		if __var12, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is an unordered list item")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var12); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("<ul><li>"); __err != nil {
			return
		}
		var __var13 string
		if __var13, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is a nested list item")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var13); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</li><li>"); __err != nil {
			return
		}
		var __var14 string
		if __var14, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is another nested list item")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var14); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</li></ul></li><li>"); __err != nil {
			return
		}
		var __var15 string
		if __var15, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is another list item")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var15); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</li></ul></section><section><h2>"); __err != nil {
			return
		}
		var __var16 string
		if __var16, __err = hamlet.CaptureErrors(hamlet.EscapeString("HTML Attributes")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var16); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</h2><p>"); __err != nil {
			return
		}
		var __var17 string
		if __var17, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is an example of an HTML tag with attributes.")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var17); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p><ul><li><a href=\"http://haml.info\">"); __err != nil {
			return
		}
		var __var18 string
		if __var18, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is a link")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var18); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</a></li><li><img src=\"http://haml.info/images/haml.png\" alt=\"Haml logo\"></li></ul></section><section><h2>"); __err != nil {
			return
		}
		var __var19 string
		if __var19, __err = hamlet.CaptureErrors(hamlet.EscapeString("Haml Code")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var19); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</h2><p>"); __err != nil {
			return
		}
		var __var20 string
		if __var20, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is an example of a Haml code block.")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var20); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p><ul>"); __err != nil {
			return
		}
		for i := 0; i < 5; i++ {
			if _, __err = __buf.WriteString("<li>"); __err != nil {
				return
			}
			var __var21 string
			if __var21, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is list item ")); __err != nil {
				return
			}
			if _, __err = __buf.WriteString(__var21); __err != nil {
				return
			}
			var __var22 string
			if __var22, __err = hamlet.CaptureErrors(strconv.Itoa(i)); __err != nil {
				return
			}
			if _, __err = __buf.WriteString(__var22); __err != nil {
				return
			}
			if _, __err = __buf.WriteString("</li>"); __err != nil {
				return
			}
		}
		if _, __err = __buf.WriteString("</ul></section><section><h2>"); __err != nil {
			return
		}
		var __var21 string
		if __var21, __err = hamlet.CaptureErrors(hamlet.EscapeString("Haml Comments")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var21); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</h2><p>"); __err != nil {
			return
		}
		var __var22 string
		if __var22, __err = hamlet.CaptureErrors(hamlet.EscapeString("This is an example of a Haml comment.")); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var22); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p></section></body></html>"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __buf.WriteTo(__w)
		}
		return
	})
}
