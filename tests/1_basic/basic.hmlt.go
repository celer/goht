// Code generated by hamlet - DO NOT EDIT.

package __basic

import (
	"bytes"
	"context"
	"github.com/stackus/hamlet"
	"io"
)

func basic() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>one &amp; done</p>"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __buf.WriteTo(__w)
		}
		return
	})
}

func basic2(fizz string, list map[string]string) hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p id=\"fizz\" class=\"foo\""); __err != nil {
			return
		}
		var __var1 string
		__var1, __err = hamlet.BuildAttributeList(list)
		if __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var1); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(">indented one &amp; done</p><img src=\"b&amp;ar.png\" title=\""); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(hamlet.EscapeString(fizz) + "\""); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(">"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __buf.WriteTo(__w)
		}
		return
	})
}

func basic3(fizz string) hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<!DOCTYPE html><html><head><title>"); __err != nil {
			return
		}
		var __var2 string
		if __var2, __err = hamlet.CaptureErrors(hamlet.EscapeString(fizz)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var2); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</title></head><body><p>"); __err != nil {
			return
		}
		var __var3 string
		if __var3, __err = hamlet.CaptureErrors(fizz); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var3); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(" buzz</p></body></html>"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __buf.WriteTo(__w)
		}
		return
	})
}

func basic4(items []string) hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<ul>"); __err != nil {
			return
		}
		for _, item := range items {
			if _, __err = __buf.WriteString("<li>"); __err != nil {
				return
			}
			var __var4 string
			if __var4, __err = hamlet.CaptureErrors(hamlet.EscapeString(item)); __err != nil {
				return
			}
			if _, __err = __buf.WriteString(__var4); __err != nil {
				return
			}
			if _, __err = __buf.WriteString("</li>"); __err != nil {
				return
			}
		}
		if _, __err = __buf.WriteString("</ul>"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __buf.WriteTo(__w)
		}
		return
	})
}
