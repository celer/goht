// Code generated by GoHT v0.8.0 - DO NOT EDIT.
// https://github.com/stackus/goht

package hello

import "context"
import "io"
import "github.com/stackus/goht"

// An example of several Haml features supported by Goht.

var terms = []string{"foo", "bar", "baz", "fizz", "buzz", "quux"}

func termsWrapper(term string) goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		if __err = __children.Render(ctx, __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n<p>And it was passed in as well "); __err != nil {
			return
		}
		var __var1 string
		if __var1, __err = goht.CaptureErrors(goht.EscapeString(term)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var1); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func hamlTermsWrapper(term string) goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		if __err = __children.Render(ctx, __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n<p>And it was passed in as well "); __err != nil {
			return
		}
		var __var1 string
		if __var1, __err = goht.CaptureErrors(goht.EscapeString(term)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var1); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func slimTermsWrapper(term string) goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		if __err = __children.Render(ctx, __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p><p>And it was passed in as well "); __err != nil {
			return
		}
		var __var1 string
		if __var1, __err = goht.CaptureErrors(goht.EscapeString(term)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var1); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func World() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"><title>Hello World</title>\n<style>\nbody {\n\tcolor: white;\n\tfont-family: sans-serif;\n\tbackground-color: #333;\n}\n.term {\n\tfont-weight: bold;\n\tcolor: #99f;\n}\n</style></head>\n<body>\n<h1>Hello World</h1>\n<p>the following will loop a slice of strings and will pass each string into a child template</p>\n"); __err != nil {
			return
		}
		for _, term := range terms {
			__var1 := goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
				__buf, __isBuf := __w.(goht.Buffer)
				if !__isBuf {
					__buf = goht.GetBuffer()
					defer goht.ReleaseBuffer(__buf)
				}
				if _, __err = __buf.WriteString("<p class=\"term\">"); __err != nil {
					return
				}
				var __var2 string
				if __var2, __err = goht.CaptureErrors(goht.EscapeString(term)); __err != nil {
					return
				}
				if _, __err = __buf.WriteString(__var2); __err != nil {
					return
				}
				if _, __err = __buf.WriteString("</p>\n"); __err != nil {
					return
				}
				if !__isBuf {
					_, __err = io.Copy(__w, __buf)
				}
				return
			})
			if __err = termsWrapper(term).Render(goht.PushChildren(ctx, __var1), __buf); __err != nil {
				return
			}
		}
		if _, __err = __buf.WriteString("</body>\n</html>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func HamlWorld() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"><title>Hello World</title>\n<style>\nbody {\n\tcolor: white;\n\tfont-family: sans-serif;\n\tbackground-color: #333;\n}\n.term {\n\tfont-weight: bold;\n\tcolor: #99f;\n}\n</style></head>\n<body>\n<h1>Hello World</h1>\n<div>the following will loop a slice of strings and will pass each string into a child template</div>\n"); __err != nil {
			return
		}
		for _, term := range terms {
			__var1 := goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
				__buf, __isBuf := __w.(goht.Buffer)
				if !__isBuf {
					__buf = goht.GetBuffer()
					defer goht.ReleaseBuffer(__buf)
				}
				if _, __err = __buf.WriteString("<p class=\"term\">"); __err != nil {
					return
				}
				var __var2 string
				if __var2, __err = goht.CaptureErrors(goht.EscapeString(term)); __err != nil {
					return
				}
				if _, __err = __buf.WriteString(__var2); __err != nil {
					return
				}
				if _, __err = __buf.WriteString("</p>\n"); __err != nil {
					return
				}
				if !__isBuf {
					_, __err = io.Copy(__w, __buf)
				}
				return
			})
			if __err = hamlTermsWrapper(term).Render(goht.PushChildren(ctx, __var1), __buf); __err != nil {
				return
			}
		}
		if _, __err = __buf.WriteString("</body>\n</html>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func SlimWorld() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><title>Hello World</title><style>\nbody {\n\tcolor: white;\n\tfont-family: sans-serif;\n\tbackground-color: #333;\n}\n.term {\n\tfont-weight: bold;\n\tcolor: #99f;\n}\n</style></head><body><h1>Hello World</h1><p>the following will loop a slice of strings and will pass each string into a child template</p>"); __err != nil {
			return
		}
		for _, term := range terms {
			__var1 := goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
				__buf, __isBuf := __w.(goht.Buffer)
				if !__isBuf {
					__buf = goht.GetBuffer()
					defer goht.ReleaseBuffer(__buf)
				}
				if _, __err = __buf.WriteString("<p class=\"term\">"); __err != nil {
					return
				}
				var __var2 string
				if __var2, __err = goht.CaptureErrors(goht.EscapeString(term)); __err != nil {
					return
				}
				if _, __err = __buf.WriteString(__var2); __err != nil {
					return
				}
				if _, __err = __buf.WriteString("</p>"); __err != nil {
					return
				}
				if !__isBuf {
					_, __err = io.Copy(__w, __buf)
				}
				return
			})
			if __err = slimTermsWrapper(term).Render(goht.PushChildren(ctx, __var1), __buf); __err != nil {
				return
			}
		}
		if _, __err = __buf.WriteString("</body></html>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}

func EgoWorld() goht.Template {
	return goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
		__buf, __isBuf := __w.(goht.Buffer)
		if !__isBuf {
			__buf = goht.GetBuffer()
			defer goht.ReleaseBuffer(__buf)
		}
		var __children goht.Template
		ctx, __children = goht.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Hello World</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tcolor: white;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tbackground-color: #333;\n\t\t\t}\n\t\t\t.term {\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: #99f;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h1>Hello World</h1>\n\t\t<p>the following will loop a slice of strings and will pass each string into a child template</p>\n\t\t"); __err != nil {
			return
		}
		for _, term := range terms {
			__var1 := goht.TemplateFunc(func(ctx context.Context, __w io.Writer, __sts ...goht.SlottedTemplate) (__err error) {
				__buf, __isBuf := __w.(goht.Buffer)
				if !__isBuf {
					__buf = goht.GetBuffer()
					defer goht.ReleaseBuffer(__buf)
				}
				if _, __err = __buf.WriteString("<p class=\"term\">"); __err != nil {
					return
				}
				var __var2 string
				if __var2, __err = goht.CaptureErrors(goht.EscapeString(term)); __err != nil {
					return
				}
				if _, __err = __buf.WriteString(__var2); __err != nil {
					return
				}
				if _, __err = __buf.WriteString("</p>"); __err != nil {
					return
				}
				if !__isBuf {
					_, __err = io.Copy(__w, __buf)
				}
				return
			})
			if __err = termsWrapper(term).Render(goht.PushChildren(ctx, __var1), __buf); __err != nil {
				return
			}
		}
		if _, __err = __buf.WriteString("</body>\n</html>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(__buf.Bytes())
		}
		return
	})
}
