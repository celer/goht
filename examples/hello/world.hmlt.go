// Code generated by hamlet - DO NOT EDIT.

package hello

import "bytes"
import "context"
import "io"
import "github.com/stackus/hamlet"

// An example of several Haml features supported by Hamlet.

var terms = []string{"foo", "bar", "baz", "fizz", "buzz", "quux"}

func termsWrapper(term string) hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		if __err = __children.Render(ctx, __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n<p>And it was passed in as well "); __err != nil {
			return
		}
		var __var1 string
		if __var1, __err = hamlet.CaptureErrors(hamlet.EscapeString(term)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var1); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}

func World() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"><title>Hello World</title>\n<style>body {\n\tcolor: white;\n\tfont-family: sans-serif;\n\tbackground-color: #333;\n}\n.term {\n\tfont-weight: bold;\n\tcolor: #99f;\n}\n</style></head>\n<body>\n<h1>Hello World</h1>\n<p>the following will loop a slice of strings and will pass each string into a child template</p>\n"); __err != nil {
			return
		}
		for _, term := range terms {
			__var1 := hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
				__buf, __isBuf := __w.(*bytes.Buffer)
				if !__isBuf {
					__buf = hamlet.GetBuffer()
					defer hamlet.ReleaseBuffer(__buf)
				}
				if _, __err = __buf.WriteString("<p class=\"term\">"); __err != nil {
					return
				}
				var __var2 string
				if __var2, __err = hamlet.CaptureErrors(hamlet.EscapeString(term)); __err != nil {
					return
				}
				if _, __err = __buf.WriteString(__var2); __err != nil {
					return
				}
				if _, __err = __buf.WriteString("</p>\n"); __err != nil {
					return
				}
				if !__isBuf {
					_, __err = io.Copy(__w, __buf)
				}
				return
			})
			if __err = termsWrapper(term).Render(hamlet.PushChildren(ctx, __var1), __buf); __err != nil {
				return
			}
		}
		if _, __err = __buf.WriteString("</body>\n</html>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}
