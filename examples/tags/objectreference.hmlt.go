// Code generated by hamlet - DO NOT EDIT.

package tags

import (
	"bytes"
	"context"
	"github.com/stackus/hamlet"
	"io"
)

// In HAML it is possible to include an object in the tag
// declaration to make the addition of classes and ids easier.
// This is done by using a pair of square brackets after the
// tag, id, or class declaration.
//
// The object used will need to implement one or both of the
// following methods:
// - ObjectID() string
// - ObjectClass() string

type Foo struct {
	id string
}

func (f *Foo) ObjectID() string {
	return f.id
}

func (f *Foo) ObjectClass() string {
	return "foo"
}

// if obj below has the id "bar" then the output will be:
// <article id="foo_bar" class="foo">Foo article</article>

func ObjectRefs(obj Foo) hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<article"); __err != nil {
			return
		}
		if __var1 := hamlet.ObjectID(obj); __var1 != "" {
			if _, __err = __buf.WriteString(" id=\"" + __var1 + "\""); __err != nil {
				return
			}
		}
		var __var2 string
		__var2, __err = hamlet.BuildClassList(hamlet.ObjectClass(obj))
		if __err != nil {
			return
		}
		if _, __err = __buf.WriteString(" class=\"" + __var2 + "\""); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(">Foo article</article>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}

// You may include a prefix to be used with the id and class.
var prefixVar = "article"

func PrefixedObjectRefs(obj Foo) hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<article"); __err != nil {
			return
		}
		if __var3 := hamlet.ObjectID(obj, "prefix"); __var3 != "" {
			if _, __err = __buf.WriteString(" id=\"" + __var3 + "\""); __err != nil {
				return
			}
		}
		var __var4 string
		__var4, __err = hamlet.BuildClassList(hamlet.ObjectClass(obj, "prefix"))
		if __err != nil {
			return
		}
		if _, __err = __buf.WriteString(" class=\"" + __var4 + "\""); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(">Foo article with id \"prefix_foo_bar\" and class \"prefix_foo\"</article>\n<article"); __err != nil {
			return
		}
		if __var5 := hamlet.ObjectID(obj, prefixVar); __var5 != "" {
			if _, __err = __buf.WriteString(" id=\"" + __var5 + "\""); __err != nil {
				return
			}
		}
		var __var6 string
		__var6, __err = hamlet.BuildClassList(hamlet.ObjectClass(obj, prefixVar))
		if __err != nil {
			return
		}
		if _, __err = __buf.WriteString(" class=\"" + __var6 + "\""); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(">Foo article with id \"article_foo_bar\" and class \"article_foo\"</article>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}
