// Code generated by hamlet - DO NOT EDIT.

package main

import "bytes"
import "context"
import "io"
import "github.com/stackus/hamlet"

// You include other templates using the `@render` command. It takes
// the name of the template to render.
// The `@render` command is used in combination with the rendering
// code syntax `=`.

func RenderExample() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		__var1 := hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
			__buf, __isBuf := __w.(*bytes.Buffer)
			if !__isBuf {
				__buf = hamlet.GetBuffer()
				defer hamlet.ReleaseBuffer(__buf)
			}
			if !__isBuf {
				_, __err = io.Copy(__w, __buf)
			}
			return
		})
		if __err = ChildrenExample().Render(hamlet.PushChildren(ctx, __var1), __buf); __err != nil {
			return
		}
		if _, __err = __buf.WriteString("</p>\n<p>the other template was rendered above.</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}

// You may also include nested content to be rendered by the template.
// You do not need to include any opening or closing braces when you
// are passing content on to be rendered by another template.

func RenderWithChildrenExample() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>The other template will be rendered below.</p>\n"); __err != nil {
			return
		}
		__var1 := hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
			__buf, __isBuf := __w.(*bytes.Buffer)
			if !__isBuf {
				__buf = hamlet.GetBuffer()
				defer hamlet.ReleaseBuffer(__buf)
			}
			if _, __err = __buf.WriteString("<p>this content will be rendered by the other template.</p>\n"); __err != nil {
				return
			}
			if !__isBuf {
				_, __err = io.Copy(__w, __buf)
			}
			return
		})
		if __err = ChildrenExample().Render(hamlet.PushChildren(ctx, __var1), __buf); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}
