// Code generated by hamlet - DO NOT EDIT.

package example

import (
	"bytes"
	"context"
	"github.com/stackus/hamlet"
	"io"
)

// Variables and calls to functions that return values can be interpolated
// into the Hamlet templates.

var someVar = "Hello"

func InterpolateCode() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("<p>"); __err != nil {
			return
		}
		var __var1 string
		if __var1, __err = hamlet.CaptureErrors(hamlet.EscapeString(someVar)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var1); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(", World!</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}

// Because the interpolation and tag id share the same starting character,
// a `#` you will need to escape the interpolation with a backslash when it
// is the first character of a line.
// This is only necessary when it is the first character of a line and not
// when it is the first character of text following a tag.

func EscapeInterpolation() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		var __var2 string
		if __var2, __err = hamlet.CaptureErrors(hamlet.EscapeString(someVar)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var2); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(", World!\n<p>"); __err != nil {
			return
		}
		var __var3 string
		if __var3, __err = hamlet.CaptureErrors(hamlet.EscapeString(someVar)); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(__var3); __err != nil {
			return
		}
		if _, __err = __buf.WriteString(", World!</p>\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}

// There are also times when you want to ignore the interpolation and just
// print the text. This is also handled with the backslash.
// This can be done at the start of a line, after a tag or even mid-text.
//
// You will need to use two backslashes to escape the interpolation when
// it is at the start of a line. This is because the first backslash is
// triggering the parser to not interpret the next character as any
// kind of special character.
// This is also how you would escape a tag, id, or class character at the
// start of a line.

func IgnoreInterpolation() hamlet.Template {
	return hamlet.TemplateFunc(func(ctx context.Context, __w io.Writer) (__err error) {
		__buf, __isBuf := __w.(*bytes.Buffer)
		if !__isBuf {
			__buf = hamlet.GetBuffer()
			defer hamlet.ReleaseBuffer(__buf)
		}
		var __children hamlet.Template
		ctx, __children = hamlet.PopChildren(ctx)
		_ = __children
		if _, __err = __buf.WriteString("#{someVar}, World!\n<p>\n#{someVar}, World!\n</p>\nA greeting: #{someVar}, World!\n. this line begins with a period\n# this line begins with a hash\n% this line begins with a percent\n"); __err != nil {
			return
		}
		if !__isBuf {
			_, __err = __w.Write(hamlet.NukeWhitespace(__buf.Bytes()))
		}
		return
	})
}
